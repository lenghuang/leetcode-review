export const getExampleQuestionContent = (): string =>
  '<p>Given an array of integers <code>nums</code>&nbsp;and an integer <code>target</code>, return <em>indices of the two numbers such that they add up to <code>target</code></em>.</p>\n\n<p>You may assume that each input would have <strong><em>exactly</em> one solution</strong>, and you may not use the <em>same</em> element twice.</p>\n\n<p>You can return the answer in any order.</p>\n\n<p>&nbsp;</p>\n<p><strong class="example">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,7,11,15], target = 9\n<strong>Output:</strong> [0,1]\n<strong>Explanation:</strong> Because nums[0] + nums[1] == 9, we return [0, 1].\n</pre>\n\n<p><strong class="example">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,4], target = 6\n<strong>Output:</strong> [1,2]\n</pre>\n\n<p><strong class="example">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,3], target = 6\n<strong>Output:</strong> [0,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li>\n\t<li><strong>Only one valid answer exists.</strong></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow-up:&nbsp;</strong>Can you come up with an algorithm that is less than <code>O(n<sup>2</sup>)</code><font face="monospace">&nbsp;</font>time complexity?';

export const getExampleSubmissionContent = (): string =>
  '"class Solution:\n    \n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        nums1 = [float("-inf")] + nums1 + [float("inf")]\n        nums2 = [float("-inf")] + nums2 + [float("inf")]\n        m, n  = len(nums1), len(nums2)\n        if m > n: # ensure nums1 is smaller one\n            nums1, nums2, m, n = nums2, nums1, n, m\n        lo, hi = 1, m\n        while(lo <= hi):\n            i = (lo + hi) // 2\n            j = ((m + n) // 2) - i\n            if nums1[i] < nums2[j-1]:\n                lo = i + 1\n            elif nums2[j] < nums1[i-1]:\n                hi = i - 1\n            else:\n                maxL = max(nums1[i-1], nums2[j-1])\n                minR = min(nums1[i], nums2[j])\n                if (m + n) % 2 == 0:\n                    return (maxL + minR) / 2\n                else:\n                    return minR\n        return 0.0\n"';
