{
  "interactions": {
    "1": {
      "a": "Okay, so we're going to start with the Two Sum problem. You're given an array of integers and a target number, and you need to return the indices of the two numbers that add up to the target. For example, if the array is [2, 7, 11, 15] and the target is 9, you'd return [0, 1]. Sound good?",
      "b": "Yeah, I get it. Can I start with a brute-force approach?",
      "options": [
        { "text": "Sure.", "next": "2" },
        { "text": "Can you clarify the input?", "next": "1b" }
      ]
    },
    "1b": {
      "a": "Of course, the input is an array of integers and a single integer called the target. Do you understand now?",
      "b": "Yes, go ahead.",
      "next": "2"
    },
    "2": {
      "a": "Sure, go ahead.",
      "b": "Okay, so I'd use nested loops. For each number, I'd check if it adds up to the target with every other number in the array.",
      "options": [
        { "text": "Okay.", "next": "3" },
        { "text": "Is there a better way?", "next": "4a" }
      ]
    },
    "3": {
      "a": "Okay, and what's the core operation you're repeating there?",
      "options": [
        { "text": "Adding pairs of numbers.", "next": "4a" },
        { "text": "Checking if a sum equals the target.", "next": "4b" }
      ]
    },
    "4a": {
      "a": "Right. How could we potentially reduce the amount of pair addition?",
      "options": [
        { "text": "Maybe save some results?", "next": "5a" },
        { "text": "Sort and use two pointers?", "next": "5b" }
      ]
    },
    "4b": {
      "a": "Exactly. Is there a way to use the target to help with these checks?",
      "options": [
        { "text": "Maybe calculate a difference?", "next": "5a" },
        { "text": "Sort and use two pointers?", "next": "5b" }
      ]
    },
    "5a": {
      "a": "And what data structure would be efficient for storing and looking up numbers?",
      "options": [
        { "text": "A hash map or dictionary.", "next": "6a" },
        { "text": "An array?", "next": "5c" }
      ]
    },
    "5b": {
      "a": "That's another approach. But how would you find the indices after sorting?",
      "options": [
        { "text": "I'm not sure.", "next": "6d" },
        { "text": "I would store the old indexes.", "next": "6d" }
      ]
    },
    "5c": {
      "a": "While an array can store the numbers, it won't allow for quick lookups. What other data structure would work?",
      "options": [
        {
          "text": "A hash map.",
          "next": "6a"
        },
        {
          "text": "I am not sure.",
          "next": "6a"
        }
      ]
    },
    "6a": {
      "a": "Excellent. Can you explain how you'd use a hash map to solve this problem?",
      "options": [
        {
          "text": "Iterate, calculate complement, check map, store.",
          "next": "7a"
        },
        { "text": "Store all, iterate to find.", "next": "7c" }
      ]
    },
    "6d": {
      "a": "Let's focus on the hashmap solution, as it is more efficient for this problem. Can you describe how you would solve it?",
      "options": [
        {
          "text": "Iterate, calculate complement, check map, store.",
          "next": "7a"
        },
        { "text": "Not sure.", "next": "7a" }
      ]
    },
    "7a": {
      "a": "Perfect. Now, what would the time and space complexity be?",
      "options": [
        { "text": "O(n) time and O(n) space.", "next": "8a" },
        { "text": "Not sure.", "next": "8a" }
      ]
    },
    "7c": {
      "a": "Can you optimize it to only iterate through the array once?",
      "options": [
        {
          "text": "Oh, I can check for the complement while inserting into the hash map.",
          "next": "7a"
        },
        {
          "text": "I am not sure.",
          "next": "7a"
        }
      ]
    },
    "8a": {
      "a": "Great, let's move on. How would you handle duplicate numbers in the input array?",
      "options": [
        {
          "text": "I'd check if the current number is the same as the previous one and skip it.",
          "next": "9"
        },
        { "text": "I'm not sure how to handle duplicate numbers.", "next": "9" }
      ]
    },
    "9": {
      "a": "What if you needed to find three numbers that sum to the target?",
      "options": [
        {
          "text": "I'd use three nested loops or sort and use three pointers.",
          "next": "10"
        },
        {
          "text": "I'm not sure how to approach the three sum problem.",
          "next": "10"
        }
      ]
    },
    "10": {
      "a": "Great, thanks for your time.",
      "options": [
        { "text": "Thank you!", "next": null },
        { "text": "Thank you, too.", "next": null }
      ]
    }
  }
}
